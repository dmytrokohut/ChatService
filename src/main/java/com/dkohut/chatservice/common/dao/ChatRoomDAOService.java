package com.dkohut.chatservice.common.dao;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import org.apache.log4j.Logger;
import org.jtemplate.sql.Parameters;
import org.springframework.stereotype.Repository;

import com.dkohut.chatservice.common.entity.ChatRoom;
import com.dkohut.chatservice.common.interfaces.IChatRoomDAOService;


/**
 * This class responsible for executing queries in database and extracting info from it.
 * 
 * @author Dmytro Kohut
 *
 */
@Repository
public class ChatRoomDAOService implements IChatRoomDAOService {
	
	private static final String ID = "id";
	private static final String NAME = "name";
	private static final String FIRST_ROW = "firstRow";
	private static final String NUMBER_OF_ROWS = "numberOfRows";
	
	private static final String QUERY_SELECT_SPECIFIED_NUMBER_OF_ROWS = "SELECT id, name, created_at FROM chat_rooms ORDER BY "
												+ "created_at LIMIT :numberOfRows OFFSET :firstRow";
	private static final String QUERY_SELECT_BY_ID = "SELECT id, name, created_at FROM chat_rooms WHERE id=:id";
	private static final String QUERY_CREATE = "INSERT INTO chat_rooms(name, created_at) VALUES(:name, NOW())";
	private static final String QUERY_UPDATE = "UPDATE chat_rooms SET name=:name WHERE id=:id";
	private static final String QUERY_DELETE = "DELETE FROM chat_rooms WHERE id=:id";
	
	private static final Logger logger = Logger.getLogger(ChatRoomDAOService.class);
	
	private static Connection connection;
	
	
	static {
		try {
			Class.forName("com.mysql.jdbc.Driver");
			connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/chats", "root", "root");
			
		} catch (ClassNotFoundException | SQLException e) {
			logger.error(e);
			throw new RuntimeException(e);
		}				
	}
	
	
	/**
	 * @see com.dkohut.chatservice.common.interfaces.IChatRoomDAOService#getSpecifiedNumberOfRows(Integer, Integer)
	 */
	@Override
	public List<ChatRoom> getSpecifiedNumberOfRows(Integer firstRow, Integer numberOfRows) {
		
		try {		
			Parameters parameters = Parameters.parse(QUERY_SELECT_SPECIFIED_NUMBER_OF_ROWS);
			
			PreparedStatement statement = connection.prepareStatement(parameters.getSQL());
			
			parameters.put(FIRST_ROW, firstRow);
			parameters.put(NUMBER_OF_ROWS, numberOfRows);
			parameters.apply(statement);
			
			ResultSet resultSet = statement.executeQuery();
			
			List<ChatRoom> listOfChatRooms = new ArrayList<>();
			
			while(resultSet.next()) {				
				listOfChatRooms.add(ChatRoom.getChatRoom(resultSet));
			}
		
			return listOfChatRooms;
			
		} catch(SQLException e) {
			logger.error(e);
			throw new RuntimeException(e);
		}
		
	}
	

	/**
	 * @see com.dkohut.chatservice.common.interfaces.IChatRoomDAOService#getById(Integer)
	 */
	@Override
	public ChatRoom getById(Integer id) {
		
		try {			
			Parameters parameters = Parameters.parse(QUERY_SELECT_BY_ID);
			
			PreparedStatement statement = connection.prepareStatement(parameters.getSQL());
			
			parameters.put(ID, id);
			parameters.apply(statement);
			
			ResultSet resultSet = statement.executeQuery();
			resultSet.next();
			
			return ChatRoom.getChatRoom(resultSet);
			
		} catch(SQLException e) {
			logger.error(e);
			throw new RuntimeException(e);
		}
		
	}

	
	/**
	 * @see com.dkohut.chatservice.common.interfaces.IChatRoomDAOService#create(String)
	 */
	@Override
	public ChatRoom create(String name) {
		
		try {			
			Parameters parameters = Parameters.parse(QUERY_CREATE);
			
			PreparedStatement statement = connection.prepareStatement(parameters.getSQL(), Statement.RETURN_GENERATED_KEYS);			
			
			parameters.put(NAME, name);
			parameters.apply(statement);
			
			statement.execute();
			
			// Get id of chat room generated by DB
			ResultSet generatedId = statement.getGeneratedKeys();
			generatedId.next();
			
			return getById(generatedId.getInt(1));
			
		} catch(SQLException e) {
			logger.error(e);
			throw new RuntimeException(e);
		}
		
	}

	
	/**
	 * @see com.dkohut.chatservice.common.interfaces.IChatRoomDAOService#update(ChatRoom)
	 */
	@Override
	public ChatRoom update(ChatRoom chatRoom) {
		
		try {	
			Parameters parameters = Parameters.parse(QUERY_UPDATE);
			
			PreparedStatement statement = connection.prepareStatement(parameters.getSQL());
			
			parameters.put(ID, chatRoom.getId());
			parameters.put(NAME, chatRoom.getName());
			parameters.apply(statement);
			
			statement.execute();
			
			return getById(chatRoom.getId());
			
		} catch(SQLException e) {
			logger.error(e);
			throw new RuntimeException(e);
		}
		
	}

	
	/**
	 * @see com.dkohut.chatservice.common.interfaces.IChatRoomDAOService#delete(Integer)
	 */ 	
	@Override
	public Boolean delete(Integer id) {
		
		try {	
			Parameters parameters = Parameters.parse(QUERY_DELETE);
			
			PreparedStatement statement = connection.prepareStatement(parameters.getSQL());
			
			parameters.put(ID, id);
			parameters.apply(statement);
			
			statement.execute();
			
			return true;
			
		} catch(SQLException e) {
			logger.error(e);
			throw new RuntimeException(e);
		}
		
	}
	
}
