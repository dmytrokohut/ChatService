package com.dkohut.chatservice.common.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import org.apache.log4j.Logger;
import org.jtemplate.sql.Parameters;
import org.springframework.stereotype.Repository;

import com.dkohut.chatservice.common.connection.ConnectionResource;
import com.dkohut.chatservice.common.entity.Message;
import com.dkohut.chatservice.common.interfaces.IMessageDAOService;

/**
 * This class responsible for executing queries in database and extracting info from it.
 * 
 * @author Dmytro Kohut
 *
 */
@Repository
public class MessageDAOService implements IMessageDAOService {

	private static final String ID = "id";
	private static final String USER_ID = "userId";
	private static final String MESSAGE = "message";
	private static final String FIRST_ROW = "firstRow";
	private static final String CHAT_ROOM_ID = "chatRoomId";
	private static final String NUMBER_OF_ROWS = "numberOfRows";	
	
	private static final String QUERY_SELECT_SPECIFIED_MESSAGES = "SELECT id, chat_room_id, user_id, message, created_at "
						+ "FROM messages WHERE chat_room_id=:chatRoomId ORDER BY created_at LIMIT :numberOfRows OFFSET :firstRow";
	private static final String QUERY_CREATE = "INSERT INTO messages(chat_room_id, user_id, message, created_at) "
						+ "VALUES(:chatRoomId, :userId, :message, NOW())";
	private static final String QUERY_SELECT_BY_ID = "SELECT id, chat_room_id, user_id, message, created_at FROM messages "
						+ "WHERE id=:id";
	private static final String QUERY_DELETE = "DELETE FROM messages WHERE id=:id";
	
	private static final Logger logger = Logger.getLogger(MessageDAOService.class);
	
	private Connection connection = ConnectionResource.getConnection();

	
	/**
	 * @see com.dkohut.chatservice.common.interfaces.IMessageDAOService#getSpecifiedMessagesOfChatRoom(Integer, Integer, Integer)
	 */
	@Override
	public List<Message> getSpecifiedMessagesOfChatRoom(Integer firstRow, Integer numberOfRows, Integer chatRoomId) {
		
		try {
			Parameters parameters = Parameters.parse(QUERY_SELECT_SPECIFIED_MESSAGES);
			
			PreparedStatement statement = connection.prepareStatement(parameters.getSQL());
			
			parameters.put(FIRST_ROW, firstRow);
			parameters.put(NUMBER_OF_ROWS, numberOfRows);
			parameters.put(CHAT_ROOM_ID, chatRoomId);
			parameters.apply(statement);
			
			ResultSet resultSet = statement.executeQuery();
			
			List<Message> listOfMessages = new ArrayList<>();
			
			while(resultSet.next()) {				
				listOfMessages.add(Message.getMessage(resultSet));
			}
			
			return listOfMessages;
			
		} catch(SQLException e) {
			logger.error(e);
			throw new RuntimeException(e);
		}
		
	}


	/**
	 * @see com.dkohut.chatservice.common.interfaces.IMessageDAOService#getById(Integer)
	 */
	@Override
	public Message getById(Integer id) {
		
		try {
			Parameters parameters = Parameters.parse(QUERY_SELECT_BY_ID);
			
			PreparedStatement statement = connection.prepareStatement(parameters.getSQL());
			
			parameters.put(ID, id);
			parameters.apply(statement);
			
			ResultSet resultSet = statement.executeQuery();
			resultSet.next();
			
			return Message.getMessage(resultSet);
			
		} catch(SQLException e ) {
			logger.error(e);
			throw new RuntimeException(e);
		}
		
	}


	/**
	 * @see com.dkohut.chatservice.common.interfaces.IMessageDAOService#create(Message)
	 */
	@Override
	public Message create(Message message) {
		
		try {
			Parameters parameters = Parameters.parse(QUERY_CREATE);
			
			PreparedStatement statement = connection.prepareStatement(parameters.getSQL(), Statement.RETURN_GENERATED_KEYS);
			
			parameters.put(CHAT_ROOM_ID, message.getChatRoomId());
			parameters.put(USER_ID, message.getUserId());
			parameters.put(MESSAGE, message.getMessage());
			parameters.apply(statement);
			
			statement.execute();
			
			// Get id of message generated by DB
			ResultSet generatedId = statement.getGeneratedKeys();
			generatedId.next();
			
			return getById(generatedId.getInt(1));
			
		} catch(SQLException e) {
			logger.error(e);
			throw new RuntimeException(e);
		}
		
	}


	/**
	 * @see com.dkohut.chatservice.common.interfaces.IMessageDAOService#delete(Integer)
	 */
	@Override
	public Boolean delete(Integer id) {
		
		try {
			Parameters parameters = Parameters.parse(QUERY_DELETE);
			
			PreparedStatement statement = connection.prepareStatement(parameters.getSQL());
			
			parameters.put(ID, id);
			parameters.apply(statement);
			
			statement.executeUpdate();
			
			return true;
			
		} catch(SQLException e) {
			logger.error(e);
			throw new RuntimeException(e);
		}
		
	}
	
	
}
