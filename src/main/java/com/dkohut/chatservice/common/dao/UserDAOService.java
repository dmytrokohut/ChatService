package com.dkohut.chatservice.common.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

import org.apache.log4j.Logger;
import org.jtemplate.sql.Parameters;
import org.springframework.stereotype.Repository;

import com.dkohut.chatservice.common.connection.ConnectionResource;
import com.dkohut.chatservice.common.entity.User;
import com.dkohut.chatservice.common.interfaces.IUserDAOService;

/**
 * This class responsible for executing queries in database and extracting info from it.
 * 
 * @author Dmytro Kohut
 *
 */
@Repository
public class UserDAOService implements IUserDAOService {
	
	private static final String ID = "id";
	private static final String NAME = "name";
	private static final String LOGIN = "login";
	private static final String PASSWORD = "password";
	private static final String EMAIL = "email";
	
	private static final String QUERY_SELECT_BY_ID = "SELECT id, name, login, password, email FROM users WHERE id=:id";
	private static final String QUERY_CREATE = "INSERT INTO users(name, login, password, email) "
												+ "VALUES(:name, :login, :password, :email)";
	private static final String QUERY_UPDATE = "UPDATE users SET name=:name, login=:login, password=:password, email=:email "
												+ "WHERE id=:id";
	private static final String QUERY_DELETE = "DELETE FROM users WHERE id=:id";
	
	private static final Logger logger = Logger.getLogger(UserDAOService.class);
	
	private Connection connection = ConnectionResource.getConnection();

	
	private void setParameters(Parameters parameters, String name, String login, String password, String email) {
		parameters.put(NAME, name);
		parameters.put(LOGIN, login);
		parameters.put(PASSWORD, password);
		parameters.put(EMAIL, email);
	}
	
	
	private void setParameterId(Parameters parameters, Integer id) {		
		parameters.put(ID, id);
	}
	

	/**
	 * @see com.dkohut.chatservice.common.interfaces.IUserDAOService#getById(Integer)
	 */
	@Override
	public User getById(Integer id) {

		try {
			Parameters parameters = Parameters.parse(QUERY_SELECT_BY_ID);
			
			PreparedStatement statement = connection.prepareStatement(parameters.getSQL());
			
			setParameterId(parameters, id);
			parameters.apply(statement);
			
			ResultSet resultSet = statement.executeQuery();
			resultSet.next();
			
			return User.getUser(resultSet);
			
		} catch(SQLException e) {
			logger.error(e);
			throw new RuntimeException(e);
		}
		
	}


	/**
	 * @see com.dkohut.chatservice.common.interfaces.IUserDAOService#create(User)
	 */
	@Override
	public User create(User user) {

		try {
			Parameters parameters = Parameters.parse(QUERY_CREATE);
			
			PreparedStatement statement = connection.prepareStatement(parameters.getSQL(), Statement.RETURN_GENERATED_KEYS);
			
			setParameters(parameters, user.getName(), user.getLogin(), user.getPassword(), user.getEmail());
			parameters.apply(statement);
			
			statement.execute();
			
			// Get id of user generated by DB
			ResultSet generatedId = statement.getGeneratedKeys();
			generatedId.next();
			
			user.setId(generatedId.getInt(1));
			
			return user;
			
		} catch(SQLException e) {
			logger.error(e);
			throw new RuntimeException(e);
		}		
		
	}


	/**
	 * @see com.dkohut.chatservice.common.interfaces.IUserDAOService#update(User)
	 */
	@Override
	public User update(User user) {

		try {
			Parameters parameters = Parameters.parse(QUERY_UPDATE);
			
			PreparedStatement statement = connection.prepareStatement(parameters.getSQL());
			
			setParameters(parameters, user.getName(), user.getLogin(), user.getPassword(), user.getEmail());
			setParameterId(parameters, user.getId());
			parameters.apply(statement);
			
			statement.execute();
			
			return user;
			
		} catch(SQLException e) {
			logger.error(e);
			throw new RuntimeException(e);
		}
		
	}


	/**
	 * @see com.dkohut.chatservice.common.interfaces.IUserDAOService#delete(Integer)
	 */
	@Override
	public Boolean delete(Integer id) {

		try {
			Parameters parameters = Parameters.parse(QUERY_DELETE);
			
			PreparedStatement statement = connection.prepareStatement(parameters.getSQL());
			
			setParameterId(parameters, id);
			parameters.apply(statement);
			
			statement.execute();
			
			return true;
			
		} catch(SQLException e) {
			logger.error(e);
			throw new RuntimeException(e);
		}
		
	}
	
	
}
